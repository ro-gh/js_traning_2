/** 1. https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Creating_New_Objects
 * 
 *  2. https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Creating_New_Objects/Using_Object_Initializers
 */
// 新しいオブジェクトの作成
// JSには定期済みオブジェクトがあるが、自分で作り出すことが出来る
// 1:初期化子を用いる
//　2：コンストラクタ関数を作成し、その関数と
// new演算子を用いてオブジェクトのインスタンスを作成できる
// オブジェクト初期化子の使用
// リテラル表示を用いてオブジェクトを作成する、ということ
// オブジェクト初期化子は「C++」でも同じ意味で使用されている用語
// 構文
const obj = {
    property_1: value_1, // property_i は識別子でも良い
    property_2: value_2, // 数値でもおk
    ...
    property_n:value_i //　文字列でもおｋ
};
//　objは新しいオブジェクトの名前を
// 各property_nは識別子を(名前、数値、文字列リテラル)を
// 各value_iはその値をproperty_ｎに代入する式を表す
// obj　及び大入部はなくても可
//　このオブジェクトを別の場所で参照する必要がないのであれば
// 変数に代入する必要はない
// 文が期待されている所にオブジェクトリテラルを置く場合、
//　リテラルを丸括弧で囲みブロック文と間違わないようにする必要がある

/** トップレベルのスクリプトでオブジェクト初期化子を使用して
 * オブジェクトを作成した場合、JavaScript はオブジェクトリテラルを含む
 * 式を評価する度にそのオブジェクトを解釈する
 * 関数内で使用された初期化子はその関数が呼び出される度に作成される
 * 
 */
// 次の式は、式「cond」がtrueの場合に限り、
// あるオブジェクトを作成し、それを変数ｘに代入する
 if (cond) x = { hi:'there'};

//次の例、3つのプロパティを持つ「myHonda」 を作成
// 「engine」プロパティは自らもプロパティを持つオブジェクトである
// ことに注意 
myHonda = {
    color:'red',
    wheels:'4',
    engine:{
        cylinders:4, size:2.2}
};

// オブジェクト初期化を使用して配列を作成することもできる

// JavaScript1.1以前ではオブジェクト初期化子を使用できない
//　コンストラクタを使用するか、他のオブジェクトが備える
// 用途の関数を使用しないと、オブジェクトを作成できない 